generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * -------------------- Auth --------------------
 * User + Session + Verification for Better Auth
 */
model User {
  id            String   @id
  name          String
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  sessions       Session[]
  cart           Cart?
  orders         Order[]
  addresses      Address[]
  paymentMethods PaymentMethod[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

/**
 * -------------------- E-Commerce Models --------------------
 */
model PaymentMethod {
  id          String  @id @default(cuid())
  type        String // "credit_card", "paypal", etc
  last4       String // last 4 digits for UI only
  providerRef String? // token/id from Stripe/PayPal/etc

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id         String @id @default(cuid())
  street     String
  postalCode String
  city       String
  country    String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id     String     @id @default(cuid())
  userId String     @unique
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  qty       Int     @default(1)
  unitPrice Decimal @db.Decimal(12, 2) // snapshot at add-to-cart

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@unique([cartId, productId])
}

model Product {
  id             String   @id @default(cuid())
  sku            String   @unique
  slug           String   @unique
  name           String
  description    String   @db.Text
  price          Decimal  @db.Decimal(12, 2)
  compareAtPrice Decimal? @db.Decimal(12, 2)
  origin         String?  @db.VarChar(2) // ISO country code
  isActive       Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  categories Category[]
  cartItems  CartItem[]
  inventory  Inventory[]
  orderItems OrderItem[]
  discounts  DiscountOnProduct[]

  @@index([createdAt])
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  slug     String    @unique
  products Product[]
}

model Discount {
  id         String    @id @default(cuid())
  name       String
  percentOff Decimal?  @db.Decimal(5, 2)
  amountOff  Decimal?  @db.Decimal(12, 2)
  validFrom  DateTime  @default(now())
  validUntil DateTime?

  products DiscountOnProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Pivot table: many-to-many with metadata
model DiscountOnProduct {
  productId  String
  discountId String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  discount   Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)

  @@id([productId, discountId])
}

model Warehouse {
  id       String @id @default(cuid())
  code     String @unique
  name     String
  location String

  inventory  Inventory[]
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Inventory {
  id          String @id @default(cuid())
  productId   String
  warehouseId String
  qty         Int    @default(0)

  product   Product   @relation(fields: [productId], references: [id], onDelete: Restrict)
  warehouse Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Restrict)

  @@unique([productId, warehouseId])
  @@index([warehouseId])
  @@index([productId])
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  status    OrderStatus @default(PENDING)
  subtotal  Decimal     @db.Decimal(12, 2)
  total     Decimal     @db.Decimal(12, 2)
  canceled  Boolean     @default(false)
  tracking  String?
  orderDate DateTime    @default(now())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user  User        @relation(fields: [userId], references: [id], onDelete: Restrict)
  items OrderItem[]
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  productId   String
  warehouseId String
  qty         Int     @default(1)
  unitPrice   Decimal @db.Decimal(12, 2)

  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Restrict)
  warehouse Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Restrict)

  @@index([orderId])
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELAYED
  COMPLETED
  CANCELED
  RETURNED
  REFUNDED
}
